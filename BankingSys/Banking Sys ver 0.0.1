참고사항

Account클래스
- 생성자. 멤버 변수 초기화 + 동적 할당
- GetAccID()
- Deposit()
- Withdraw()
- ShowAccInfo();
- 소멸자. 동적 할당 해제

main>>>
2줄 추가. 이유

void ShowMenu(void);  
- 할 말 없음!   
void MakeAccount(void);
- 한땀한땀? ㄴㄴ 한방에
- 4줄 삭제 1줄 추가

void DepositMoney(void);
- 잠겨있음. 만들어놓은 함수 2개 사용

void WithdrawMoney(void);
- 잠겨있음. 만들어놓은 함수 2개 사용

void ShowAllAccInfo(void);
- 위에 전문가 이용해서 받는다

#include <iostream>
using namespace std;
const int NAME_LEN = 20;

void ShowMenu(void);
void MakeAccount(void);
void DepositMoney(void);
void WithdrawMoney(void);
void ShowAllAccInfo(void);

enum label { MAKE = 1, DEPOSIT, WITHDRAW, INQUIRE, EXIT };

class Account
{
private:

	int accID; // 계좌번호
	char* cusName; // 고객이름 -> 동적할당
	int balance; // 잔액
	int accNum = 0; // 개설된 계좌 수 // 얘는 빼도 됨
	
public:
	Account(int id, const char* name, int bal)
		: accID(id), balance(bal) 
	{
		cusName = new char[strlen(name) + 1];
		strcpy_s(cusName, strlen(name), name);
	}
	int GetAccID()
	{
		return accID;
	}
	const char* getCusName() const 
	{
		return cusName;
	}
	int getBalance() const 
	{
		return balance;
	}
	int Deposit(int d)
	{
		balance += d;
	}
	void Withdraw(int w)
	{
		balance -= w;
		if (balance < w)
		{
			cout << "잔액 부족";
			return;
		}
		else cout << "출금 성공! " << endl;
		balance -= w;
		cout << "계좌 잔액: " << balance << endl;
	}
	
	~Account() 
	{
		delete[] cusName;
	}
};

class Bank
{
private:
	// 객체 배열이 아닌 객체 포인터 배열로 진행
	Account* acc[100] = { 0 };
	int acc_cnt;
public:
	Bank() : acc_cnt(0) 
	{
	
	}
	~Bank()
	{
		for (int i = 0; i < acc_cnt; ++i)
		{
			delete acc[i];
		}
	}
	
	
};


int main(void)
{
	Bank b;
	int choice;

	while (1)
	{
		b.showMenu();
		cout << "선택: ";
		cin >> choice;
		cout << endl;
		switch (choice)
		{
		case 1:
			b.makeAccount();
			break;
		case 2:
			DepositMoney();
			break;
		case 3:
			WithdrawMoney();
			break;
		case 4:
			ShowAllAccInfo();
			break;
		case 5:
			exit(1);
		default:
			cout << "잘못된 입력입니다 다시 입력하세요" << endl;
		}

	}
	return 0;
}
void showMenu() const
{
	cout << "AA은행 온라인 서비스를 이용해주셔서 감사합니다." << endl;
	cout << endl;
	cout << "=======[업무]=======" << endl;
	cout << "1. 계좌 개설" << endl;
	cout << "2. 입금" << endl;
	cout << "3. 출금" << endl;
	cout << "4. 잔액 조회" << endl;
	cout << "5. 프로그램 종료" << endl;
	cout << "=======[업무]=======" << endl;
}
void makeAccount()
{
	if (acc_cnt >= 100)
	{
		cout << "계좌를 더 이상 만들 수 없습니다." << endl;
		return;
	}

	int id;
	char name[NAME_LEN];
	int initialBalance;

	cout << "=============== [계좌 개설] ===============" << endl;
	cout << "계좌 번호: ";
	cin >> id;
	cout << "예금주: ";
	cin >> name;
	cout << "예금액: ";
	cin >> initialBalance;

	acc[acc_cnt++] = new Account(id, name, initialBalance);
	cout << "계좌 개설 완료." << endl;
	cout << "현재 개설된 계좌 갯수: " << acc_cnt << endl;
}
void DepositMoney(void) // 없는 계좌를 넣으면 없다고 안내
{
	cout << "=============[입금]============" << endl;
	int id, deposit;
	cout << "계좌 번호: ";
	cin >> id;
	cout << "입금액: ";
	cin >> deposit;

	for (int i = 0; i < accNum; i++)
	{
		if (accID == id)
		{
			balance += deposit;
			cout << "입금 완료! 현재 잔액: " << balance << endl;
			cout << "=============[입금]============" << endl;
			return;
		}
	}
	cout << "존재하지 않는 계좌입니다." << endl;
}
void WithdrawMoney(void) // 소지금보다 많이 빠지면 잔액부족 안내
{
	int id, withdraw;
	cout << "=============[출금]============" << endl;
	cout << "계좌 번호: ";
	cin >> id;
	cout << "출금액: ";
	cin >> withdraw;

	for (int i = 0; i < accNum; i++)
	{
		if (accID == id)
		{
			if (balance < withdraw)
			{
				cout << "잔액 부족!" << endl;
				return;
			}
			balance -= withdraw;
			cout << "출금 완료! 현재 잔액: " << balance << endl;
			cout << "=============[출금]============" << endl;
			return;
		}
	}
	cout << "존재하지 않는 계좌입니다." << endl;

}
void ShowAllAccInfo(void)
{
	int i = 0;
	for (i = 0; i < accNum;i++)
	{
		cout << "고객명: " << cusName << endl;
		cout << "계좌번호: " << accID << endl;
		cout << "계좌잔액: " << balance << endl;
		cout << endl;
	}
}
void showAccountInfo() const
{
	cout << "고객명: " << cusName << endl;
	cout << "계좌번호: " << accID << endl;
	cout << "계좌잔액: " << balance << endl;
	cout << endl;
}


