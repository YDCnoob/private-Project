참고사항

Account클래스
- 생성자. 멤버 변수 초기화 + 동적 할당
- GetAccID()
- Deposit()
- Withdraw()
- ShowAccInfo();
- 소멸자. 동적 할당 해제

main>>>
2줄 추가. 이유

void ShowMenu(void);  
- 할 말 없음!   
void MakeAccount(void);
- 한땀한땀? ㄴㄴ 한방에
- 4줄 삭제 1줄 추가

void DepositMoney(void);
- 잠겨있음. 만들어놓은 함수 2개 사용

void WithdrawMoney(void);
- 잠겨있음. 만들어놓은 함수 2개 사용

void ShowAllAccInfo(void);
- 위에 전문가 이용해서 받는다

#include <iostream>
using namespace std;

const int NAME_LEN = 20;
const int MAX_ACC = 100;

void ShowMenu();
void MakeAccount();
void DepositMoney();
void WithdrawMoney();
void ShowAllAccInfo();

enum label { MAKE = 1, DEPOSIT, WITHDRAW, INQUIRE, EXIT };

class Account 
{
private:
    int accID;
    char* cusName;
    int balance;

public:
    Account(int id, const char* name, int bal) 
        : accID(id), balance(bal) 
    {
        cusName = new char[strlen(name) + 1];
        strcpy_s(cusName, strlen(name)+1, name);
    }

    ~Account() 
    {
        delete[] cusName;
    }

    int GetAccID() const 
    {
        return accID;
    }

    void Deposit(int money) 
    {
        balance += money;
    }

    bool Withdraw(int money) 
    {
        if (balance < money) 
        {
            cout << "잔액 부족!" << endl;
            return false;
        }
        balance -= money;
        return true;
    }
    void ShowAccInfo() const 
    {
        cout << "계좌번호: " << accID << endl;
        cout << "예금주: " << cusName << endl;
        cout << "잔액: " << balance << endl << endl;
    }
};

Account* accArr[MAX_ACC];
int accCnt = 0;


int main() 
{
    int choice;
    while (true) 
    {
        ShowMenu();
        cout << "선택: ";
        cin >> choice;
        switch (choice) 
        {
        case MAKE:
            MakeAccount();
            break;
        case DEPOSIT:
            DepositMoney();
            break;
        case WITHDRAW:
            WithdrawMoney();
            break;
        case INQUIRE:
            ShowAllAccInfo();
            break;
        case EXIT:
            for (int i = 0; i < accCnt; i++)
                delete accArr[i];
            return 0;
        default:
            cout << "잘못된 입력입니다. 다시 입력하세요." << endl;
        }
    }
}
void ShowMenu() 
{
    cout << "=======[업무]=======" << endl;
    cout << "1. 계좌 개설" << endl;
    cout << "2. 입금" << endl;
    cout << "3. 출금" << endl;
    cout << "4. 잔액 조회" << endl;
    cout << "5. 프로그램 종료" << endl;
    cout << "===================" << endl;
}

void MakeAccount() 
{
    if (accCnt >= MAX_ACC) 
    {
        cout << "계좌를 더 이상 만들 수 없습니다." << endl;
        return;
    }
    int id, balance;
    char name[NAME_LEN];
    cout << "계좌번호: "; cin >> id;
    cout << "예금주: "; cin >> name;
    cout << "입금액: "; cin >> balance;
    accArr[accCnt++] = new Account(id, name, balance);
    cout << "계좌 개설 완료!" << endl;
}

void DepositMoney() 
{
    int id, money;
    cout << "계좌번호: "; cin >> id;
    cout << "입금액: "; cin >> money;
    for (int i = 0; i < accCnt; i++) 
    {
        if (accArr[i]->GetAccID() == id) 
        {
            accArr[i]->Deposit(money);
            cout << "입금 완료!" << endl;
            return;
        }
    }
    cout << "존재하지 않는 계좌입니다." << endl;
}

void WithdrawMoney() 
{
    int id, money;
    cout << "계좌번호: "; cin >> id;
    cout << "출금액: "; cin >> money;
    for (int i = 0; i < accCnt; i++) 
    {
        if (accArr[i]->GetAccID() == id) 
        {
            if (accArr[i]->Withdraw(money))
                cout << "출금 완료!" << endl;
            return;
        }
    }
    cout << "존재하지 않는 계좌입니다." << endl;
}

void ShowAllAccInfo() 
{
    for (int i = 0; i < accCnt; i++) 
    {
        accArr[i]->ShowAccInfo();
    }
}



