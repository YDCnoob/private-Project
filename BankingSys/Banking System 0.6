/*
* Banking System Ver 0.6
* 작성자: 최현우
* 내	  용: 이자 관련 계좌 클래스의 추가       
*/

#include <iostream>
using namespace std;

const int NAME_LEN = 20;
const int MAX_ACC = 100;

enum label { MAKE = 1, DEPOSIT, WITHDRAW, INQUIRE, EXIT };

class Account // 엔터티(데이터) 클래스
{
private:
    int accID;
    int balance;
    char* cusName;

public:

    Account(int id, const char* name, int bal)
        : accID(id), balance(bal)
    {
        cusName = new char[strlen(name) + 1];
        strcpy_s(cusName, strlen(name) + 1, name);
    }
    Account(const Account& copy)
        : accID(copy.accID), balance(copy.balance)
    {
        cusName = new char[strlen(copy.cusName) + 1];
        strcpy_s(cusName, strlen(copy.cusName) + 1, copy.cusName);
    }
    int GetAccID() const
    {
        return accID;
    }
    virtual void Deposit(int money)
    {
        balance += money;
    }
    int GetBalance() const
    {
        return balance;
    }
    int Withdraw(int money)
    {
        if (balance < money)
        {
            cout << "잔액 부족!" << endl;
            return 0;
        }
        balance -= money;
        return money;
    }
    void ShowAccInfo() const
    {
        cout << "계좌번호: " << accID << endl;
        cout << "예금주: " << cusName << endl;
        cout << "잔액: " << balance << endl << endl;
    }
    virtual ~Account()
    {
        delete[] cusName;
    }
};

class NormalAccount : public Account // 보통예금계좌
{
private:
    double interRate; // Interest Rate 이율
public:
    NormalAccount(int id, const char* name, int bal, double rate)
        :Account(id, name, bal), interRate(rate)
    {
    }
    void Deposit(int bal)
    {
        Account::Deposit(bal);
        Account::Deposit((bal * (interRate / 100.0)));
    }
};

namespace Rank
{
    enum { A = 7, B = 4, C = 2 };
}

class HighCreditAccount : public NormalAccount // 신용신뢰계좌
{
private:
    int specialRate;
public:
    HighCreditAccount(int id, const char* name, int bal, double rate, const int _rank)
        :NormalAccount(id, name, bal, rate), specialRate(_rank)
    {
    }
    void Deposit(int bal)
    {
        NormalAccount::Deposit(bal);
        Account::Deposit(bal * (specialRate / 100.0));
    }
    
};

class AccountHandler // 컨트롤(핸들러) 클래스
{
private:
    Account* accArr[MAX_ACC];
    int accCnt;

public:
    AccountHandler()
        :accCnt(0)
    {
        accArr[0] = NULL;
    }

    void ShowMenu();
    //void MakeAccount();
    void MakeNormalAccount();
    void MakeHighCreditAccount();
    void DepositMoney();
    void WithdrawMoney();
    void ShowAllAccInfo();

    int Getacc() const
    {
        return accCnt;
    }

    ~AccountHandler()
    {
        for (int i = 0; i < accCnt; i++)
            delete accArr[i];
    }
};

int main(void)
{
    AccountHandler ACH;
    int choice1;
    int choice2;
    while (true)
    {
        ACH.ShowMenu();
        cout << "선택: ";
        cin >> choice1;
        switch (choice1)
        {
        case MAKE:
            cout << "1. 보통예금 2. 신용신뢰예금" << endl;
            cout << "선택: ";
            cin >> choice2;
            switch (choice2)
            {
            case 1:
                cout << "보통 예금 계좌 개설" << endl;
                ACH.MakeNormalAccount();
                break;
            case 2:
                cout << "신용 신뢰 계좌 개설" << endl;
                ACH.MakeHighCreditAccount();
                break;
            }
            break;
        case DEPOSIT:
            ACH.DepositMoney();
            break;
        case WITHDRAW:
            ACH.WithdrawMoney();
            break;
        case INQUIRE:
            ACH.ShowAllAccInfo();
            break;
        case EXIT:
            return 0;
        default:
            cout << "잘못된 입력입니다. 다시 입력하세요." << endl;
        }
    }
}
void AccountHandler::ShowMenu()
{
    cout << "=======[업무]=======" << endl;
    cout << "1. 계좌 개설" << endl;
    cout << "2. 입금" << endl;
    cout << "3. 출금" << endl;
    cout << "4. 잔액 조회" << endl;
    cout << "5. 프로그램 종료" << endl;
    cout << "====================" << endl;
}

//void AccountHandler::MakeAccount()
//{
//    int id, balance;
//    char name[NAME_LEN];
//    cout << endl;
//    for (int i = 0;i < 2;i++)
//    {
//        cout << "==========   계좌 개설   ==========" << endl;
//        cout << "계좌번호: "; cin >> id;
//        cout << "예금주: "; cin >> name;
//        cout << "입금액: "; cin >> balance;
//        accArr[accCnt++] = new Account(id, name, balance);
//        cout << "계좌 개설 완료!" << endl;
//    }
//    cout << "=========  계좌 개설 완료  =========" << endl;
//    cout << "생성된 계좌 수: " << accCnt << endl;
//    cout << endl;
//}

void AccountHandler::MakeNormalAccount()
{
    int id, balance;
    char name[NAME_LEN];
    double rate = 0;
    cout << endl;
    for (int i = 0;i < 1;i++)
    {
        cout << "[보통 예금 계좌 개설]" << endl;
        cout << "계좌번호: "; cin >> id;
        cout << "예금주: "; cin >> name;
        cout << "입금액: "; cin >> balance;
        cout << "이자율: "; cin >> rate;
        accArr[accCnt++] = new NormalAccount(id, name, balance, rate);
        cout << "계좌 개설 완료!" << endl;
    }
}

void AccountHandler::MakeHighCreditAccount()
{
    int id, balance;
    char name[NAME_LEN];
    double rate = 0;
    int rank = 0;
    cout << endl;
    for (int i = 0;i < 1;i++)
    {
        cout << "[신용 신뢰 계좌 개설]" << endl;
        cout << "계좌번호: "; cin >> id;
        cout << "예금주: "; cin >> name;
        cout << "입금액: "; cin >> balance;
        cout << "이자율: "; cin >> rate;
        cout << "신용등급(1toA, 2toB, 3toC): "; cin >> rank;
        accArr[accCnt++] = new HighCreditAccount(id, name, balance, rate, rank);
        cout << "계좌 개설 완료!" << endl;
    }
}

void AccountHandler::DepositMoney()
{
    int id, money;
    cout << "계좌번호: "; cin >> id;
    cout << "입금액: "; cin >> money;
    for (int i = 0; i < accCnt; i++)
    {
        if (accArr[i]->GetAccID() == id)
        {
            accArr[i]->Deposit(money);
            cout << "입금 완료!" << endl;
            return;
        }
    }
    cout << "존재하지 않는 계좌입니다." << endl;
}
void AccountHandler::WithdrawMoney()
{
    int id, money;
    cout << "계좌번호: "; cin >> id;
    cout << "출금액: "; cin >> money;
    for (int i = 0; i < accCnt; i++)
    {
        if (accArr[i]->GetAccID() == id)
        {
            if (accArr[i]->Withdraw(money))
                cout << "출금 완료!" << endl;
            return;
        }
    }
    cout << "존재하지 않는 계좌입니다." << endl;
}
void AccountHandler::ShowAllAccInfo()
{
    cout << endl;
    cout << "========== 계좌 확인 ==========" << endl;
    cout << "총 생성 계좌 수: " << accCnt << endl;
    cout << endl;
    for (int i = 0; i < accCnt; i++)
    {
        accArr[i]->ShowAccInfo();
    }
    cout << "========== 계좌 확인 ==========" << endl;
    cout << endl;
}

