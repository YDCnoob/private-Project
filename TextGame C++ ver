============================================================================================================================================================================
Fixes
============================================================================================================================================================================
1.
============================================================================================================================================================================
Sumarry
============================================================================================================================================================================
1.
============================================================================================================================================================================
Update
============================================================================================================================================================================
1.
============================================================================================================================================================================
Code
============================================================================================================================================================================
#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <cmath>
using namespace std;

class CHARACTER {
public:
    string name;
    string job;
    int level;
    int hp;
    int max_hp;
    int strength;
    int agility;
    int intelligence;
    int luck;
    int exp;

    void createCharacter() {
        cout << "이름을 입력하세요: ";
        cin >> name;

        cout << "\n--- 직업 선택 ---\n";
        cout << "1. 전사(Warrior): 힘과 체력이 높음\n";
        cout << "2. 궁수(Archer): 민첩하고 회피력이 높음\n";
        cout << "3. 마법사(Mage): 지능이 높고 마법 공격 강함\n";
        cout << "4. 도적(Rogue): 행운이 높아 치명타 확률 높음\n";
        cout << "직업을 선택하세요 (1-4): ";
        int choice;
        cin >> choice;

        switch (choice) {
            case 1:
                job = "전사";
                strength = 10; agility = 5; intelligence = 3; luck = 2; max_hp = 120;
                break;
            case 2:
                job = "궁수";
                strength = 5; agility = 10; intelligence = 4; luck = 3; max_hp = 100;
                break;
            case 3:
                job = "마법사";
                strength = 3; agility = 4; intelligence = 10; luck = 3; max_hp = 90;
                break;
            case 4:
                job = "도적";
                strength = 4; agility = 5; intelligence = 4; luck = 10; max_hp = 100;
                break;
            default:
                cout << "잘못된 선택입니다. 전사로 설정합니다.\n";
                job = "전사";
                strength = 10; agility = 5; intelligence = 3; luck = 2; max_hp = 120;
        }

        level = 1;
        hp = max_hp;
        exp = 0;

        cout << "\n캐릭터 생성 완료!\n";
        printCharacterStat();
    }

    void printCharacterStat() {
        cout << "\n--- 캐릭터 상태 ---\n";
        cout << "이름: " << name << endl;
        cout << "직업: " << job << endl;
        cout << "레벨: " << level << endl;
        cout << "체력: " << hp << "/" << max_hp << endl;
        cout << "힘: " << strength << ", 민첩: " << agility << ", 지능: " << intelligence << ", 행운: " << luck << endl;
        cout << "경험치: " << exp << endl;
    }

    void levelUp() {
        if (exp >= 100) {
            level++;
            exp -= 100;
            max_hp += 10;
            hp = max_hp;

            cout << "\n레벨업! " << level << " 레벨에 도달했습니다.\n";

            int stat_increase1 = rand() % 4;
            int stat_increase2 = rand() % 4;
            while (stat_increase1 == stat_increase2) {
                stat_increase2 = rand() % 4;
            }

            int* stats[] = { &strength, &agility, &intelligence, &luck };
            *stats[stat_increase1] += 2;
            *stats[stat_increase2] += 2;

            cout << "스탯이 상승했습니다!\n";
            printCharacterStat();
        }
    }

    void promoteCharacter() {
        cout << "\n--- 전직 가능! ---\n";
        cout << "현재 직업: " << job << endl;

        if (level == 20) {
            if (job == "전사") {
                cout << "1. 파이터 (공격력 증가)\n";
                cout << "2. 페이지 (방어력 증가)\n";
            }
            else if (job == "궁수") {
                cout << "1. 헌터 (회피율 증가)\n";
                cout << "2. 사수 (명중률 증가)\n";
            }
            else if (job == "마법사") {
                cout << "1. 위자드 (마법 공격력 증가)\n";
                cout << "2. 클레릭 (성 속성 스킬 추가)\n";
            }
            else if (job == "도적") {
                cout << "1. 어쌔신 (치명타 확률 증가)\n";
                cout << "2. 시프 (회피율 증가)\n";
            }
        }
        else if (level == 40) {
            if (job == "파이터") {
                cout << "1. 크루세이더 (공격력 특화)\n";
            }
            else if (job == "페이지") {
                cout << "1. 나이트 (방어력 특화)\n";
            }
            else if (job == "헌터") {
                cout << "1. 레인저 (원거리 공격력 증가)\n";
            }
            else if (job == "사수") {
                cout << "1. 저격수 (단일 타겟 공격 특화)\n";
            }
            else if (job == "위자드") {
                cout << "1. 메이지 (마법 공격 최강)\n";
            }
            else if (job == "클레릭") {
                cout << "1. 프리스트 (성 속성 스킬 강화)\n";
            }
            else if (job == "어쌔신") {
                cout << "1. 허밋 (은신 & 치명타 증가)\n";
            }
            else if (job == "시프") {
                cout << "1. 시프마스터 (속도 증가)\n";
            }
        }

        cout << "전직을 선택하세요 (1-2): ";
        int choice;
        cin >> choice;

        if (level == 20) {
            if (job == "전사") job = (choice == 1) ? "파이터" : "페이지";
            else if (job == "궁수") job = (choice == 1) ? "헌터" : "사수";
            else if (job == "마법사") job = (choice == 1) ? "위자드" : "클레릭";
            else if (job == "도적") job = (choice == 1) ? "어쌔신" : "시프";
        }
        else if (level == 40) {
            if (job == "파이터") job = "크루세이더";
            else if (job == "페이지") job = "나이트";
            else if (job == "헌터") job = "레인저";
            else if (job == "사수") job = "저격수";
            else if (job == "위자드") job = "메이지";
            else if (job == "클레릭") job = "프리스트";
            else if (job == "어쌔신") job = "허밋";
            else if (job == "시프") job = "시프마스터";
        }

        cout << "\n전직 완료! 새로운 직업: " << job << endl;
        printCharacterStat();
    }
};

class MOP {
public:
    string name;
    int base_hp;
    int hp;
    int basDam;
    int dam;
    int exp;

    void resetMop(int difficulty) {
        hp = base_hp + difficulty * 20;
        dam = basDam + difficulty * 2;
    }
};

int calculateDamage(CHARACTER& character) {
    int basdam = 5;
    double dammul = 1.0;

    dammul += sqrt(character.strength) * 1.2;
    dammul += sqrt(character.agility) * 1.0;
    dammul += sqrt(character.intelligence) * 0.8;
    dammul += sqrt(character.luck) * 1.4;

    return (int)(basdam * dammul);
}

void fightmop(CHARACTER& character, MOP* mop, int dun_lev) {
    for (int i = 0; i < 3; i++) {
        char fight;
        int damTomop;
        int damTochr;

        cout << mop[i].name << "가 나타났다! 싸우겠습니까? (y/n): ";
        cin >> fight;

        if (fight == 'y' || fight == 'Y') {
            cout << mop[i].name << "와 전투를 시작합니다!\n";
            while (mop[i].hp > 0 && character.hp > 0) {
                damTomop = calculateDamage(character);
                mop[i].hp -= damTomop;
                cout << mop[i].name << "에게 " << damTomop << "의 데미지를 입혔다! (남은 체력: " << mop[i].hp << ")\n";

                if (mop[i].hp <= 0) {
                    cout << mop[i].name << "를 처치했다! \n";
                    character.exp += mop[i].exp;
                    cout << mop[i].exp << "의 경험치를 획득했다!!\n";
                    character.printCharacterStat();
                    character.levelUp();
                    break;
                }

                damTochr = mop[i].dam;
                character.hp -= damTochr;
                cout << mop[i].name << "가 " << character.name << "에게 " << damTochr << "의 데미지를 입혔다! (남은 체력: " << character.hp << ")\n";
                if (character.hp <= 0) {
                    cout << character.name << "가 사망했습니다... 게임 오버!\n";
                    exit(0);
                }
            }
        }
        else {
            cout << mop[i].name << "을(를) 회피했습니다..\n";
        }
    }
}

void nextDun(int& dun_lev, MOP* mop) {
    char next;
    mop->resetMop(dun_lev);
    cout << dun_lev << "층 클리어!! 다음 층으로 이동하시겠습니까? (y/n): ";
    cin >> next;

    if (next == 'y' || next == 'Y') {
        dun_lev++;
    } else {
        cout << "게임을 종료합니다.\n";
        exit(0);
    }
}

int enterDungeon(int dun_lev) {
    char enter;
    cout << dun_lev << "층 던전에 입장하시겠습니까? (y/n): ";
    cin >> enter;

    if (enter == 'n' || enter == 'N') {
        return 0;
    }
    return 1;
}

int main() {
    srand((unsigned int)time(0));

    CHARACTER character;
    MOP mop[3] = {
        {"슬라임", 200, 200, 5, 5, 40},
        {"임프", 300, 300, 10, 10, 60},
        {"고블린", 400, 400, 13, 13, 100}
    };

    character.createCharacter();

    int dun_lev = 1;
    while (true) {
        if (!enterDungeon(dun_lev)) {
            cout << "\n게임을 종료합니다.\n";
            break;
        }
        fightmop(character, mop, dun_lev);
        nextDun(dun_lev, mop);
    }

    return 0;
}
