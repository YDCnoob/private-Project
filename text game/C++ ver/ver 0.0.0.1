#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <string>
#include <windows.h>
#include <vector>

enum class ColorType
{
    BLACK,          // 0
    darkBLUE,       // 1
    DarkGreen,      // 2
    darkSkyBlue,    // 3
    DarkRed,        // 4
    DarkPurple,     // 5
    DarkYellow,     // 6
    GRAY,           // 7
    DarkGray,       // 8
    BLUE,           // 9
    GREEN,          // 10
    SkyBlue,        // 11
    RED,            // 12
    PURPLE,         // 13
    YELLOW,         // 14
    WHITE           // 15
};

class Character
{
private:
    std::string name;
    std::string job;
    int level;
    int hp;
    int max_hp;
    int strength;
    int agility;
    int intelligence;
    int luck;
    int exp;
    int gold;
    int weapondmg;
    int weaponup;
    int isNight; // 낮(0) / 밤(1) 상태

public:
    Character(std::string name = "Unknown")
        : name(name), level(1), hp(100), max_hp(100), strength(5), agility(5), intelligence(5), luck(5),
          exp(0), gold(500), weapondmg(10), weaponup(1), isNight(0) {}

    void setJob(const std::string& newJob)
    {
        job = newJob;
    }

    void setStats(int str, int agi, int intel, int luck, int maxHp)
    {
        strength = str;
        agility = agi;
        intelligence = intel;
        this->luck = luck;
        max_hp = maxHp;
        hp = max_hp;
    }

    void levelUp()
    {
        if (exp >= 100)
        {
            level++;
            exp -= 100;
            max_hp += 10;
            hp = max_hp;

            std::cout << "\n레벨업! " << level << " 레벨에 도달했습니다.\n";

            int stat_increase1 = rand() % 4;
            int stat_increase2 = rand() % 4;
            while (stat_increase1 == stat_increase2)
            {
                stat_increase2 = rand() % 4;
            }

            int* stats[] = { &strength, &agility, &intelligence, &luck };
            *stats[stat_increase1] += 2;
            *stats[stat_increase2] += 2;

            std::cout << "스탯이 상승했습니다!\n";
        }
    }

    void printStat() const
    {
        textcolor(ColorType::YELLOW);
        std::cout << "\n--- 캐릭터 상태 ---\n";
        std::cout << "이름: " << name << "\n";
        std::cout << "직업: " << job << "\n";
        std::cout << "레벨: " << level << "\n";
        std::cout << "체력: " << hp << "/" << max_hp << "\n";
        std::cout << "힘: " << strength << ", 민첩: " << agility
                  << ", 지능: " << intelligence << ", 행운: " << luck << "\n";
        std::cout << "경험치: " << exp << "\n";
        std::cout << "소지금: " << gold << "\n";
        textcolor(ColorType::WHITE);
    }

    void earnExp(int earnedExp)
    {
        exp += earnedExp;
    }

    void earnGold(int earnedGold)
    {
        gold += earnedGold;
    }

    void takeDamage(int damage)
    {
        hp -= damage;
    }

    bool isAlive() const
    {
        return hp > 0;
    }

    const std::string& getName() const
    {
        return name;
    }

    int getStrength() const { return strength; }
    int getAgility() const { return agility; }
    int getIntelligence() const { return intelligence; }
    int getLuck() const { return luck; }

    int getWeaponDmg() const { return weapondmg; }
    void upgradeWeapon(int upgradeValue) { weapondmg += upgradeValue; }

    int getHp() const { return hp; }
    void heal() { hp = max_hp; }
    void setHp(int newHp) { hp = newHp; }

    void setNight(int nightState) { isNight = nightState; }
    int getNight() const { return isNight; }
};

class Mop
{
private:
    std::string name;
    int base_hp;
    int hp;
    int basDam;
    int dam;
    int exp;
    int reward_gold;

public:
    Mop(std::string name = "Monster", int baseHp = 100, int basDam = 10, int exp = 10, int reward_gold = 10)
        : name(name), base_hp(baseHp), hp(baseHp), basDam(basDam), dam(basDam), exp(exp), reward_gold(reward_gold) {}

    void reset(int difficulty, int isNight)
    {
        hp = base_hp + difficulty * 20;
        dam = basDam + difficulty * 2;

        if (isNight)
        {
            hp = static_cast<int>(hp * 1.2);
            dam = static_cast<int>(dam * 1.2);
        }
    }

    void takeDamage(int damage)
    {
        hp -= damage;
    }

    bool isAlive() const
    {
        return hp > 0;
    }

    int getExp() const { return exp; }
    int getRewardGold() const { return reward_gold; }

    const std::string& getName() const { return name; }
    int getDam() const { return dam; }
    int getHp() const { return hp; }
};

void textcolor(ColorType colorNum)
{
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), static_cast<int>(colorNum));
}

void fightmop(Character& character, Mop& mop, int dun_lev)
{
    int damTomop;
    int damTochr;

    std::cout << mop.getName() << "가 나타났다! 싸우겠습니까? (y/n) ";
    char fight;
    std::cin >> fight;
    std::cin.ignore();

    std::cout << "\n";

    if (fight == 'y' || fight == 'Y')
    {
        textcolor(ColorType::WHITE);
        std::cout << mop.getName() << "와 전투를 시작합니다!\n";
        std::cout << "\n";
        while (mop.isAlive() && character.isAlive())
        {
            damTomop = calculateDamage(character);
            mop.takeDamage(damTomop);
            std::cout << mop.getName() << "에게 " << damTomop << "의 데미지를 입혔다! (남은 체력: " << mop.getHp() << ")\n";
            std::cout << "\n";

            if (!mop.isAlive())
            {
                std::cout << mop.getName() << "를 처치했다! \n";
                character.earnExp(mop.getExp());
                std::cout << "\n";
                std::cout << mop.getExp() << "의 경험치를 획득했다!\n";
                character.earnGold(mop.getRewardGold());
                std::cout << "\n";
                std::cout << mop.getRewardGold() << "의 골드를 획득했다!\n";
                std::cout << "\n";
                textcolor(ColorType::YELLOW);
                character.printStat();

                character.levelUp();
                break;
            }

            std::cout << "\n";
            damTochr = mop.getDam();
            character.takeDamage(damTochr);
            std::cout << mop.getName() << "가 " << character.getName() << "에게 " << damTochr << "의 데미지를 입혔다! (남은 체력: " << character.getHp() << ")\n";
            std::cout << "\n";
            if (!character.isAlive())
            {
                std::cout << character.getName() << "가 사망했습니다... 게임 오버!\n";
                exit(0);
            }
        }
    }
    else
    {
        if (fight == 'n' || fight == 'N')
            std::cout << mop.getName() << "(을)를 회피했습니다.. \n";
    }
}

int calculateDamage(const Character& character)
{
    int basdam = 5;
    double dammul = 1.0;

    dammul += sqrt(character.getStrength()) * 1.2;
    dammul += sqrt(character.getAgility()) * 1.0;
    dammul += sqrt(character.getIntelligence()) * 0.8;
    dammul += sqrt(character.getLuck()) * 1.4;

    return static_cast<int>(basdam * dammul);
}

void createCharacter(Character& character)
{
    textcolor(ColorType::WHITE);
    std::cout << "이름을 입력하세요: ";
    std::string name;
    std::getline(std::cin, name);
    character = Character(name);
}

void enterTown(Character& character)
{
    textcolor(ColorType::WHITE);
    std::cout << "마을에 도착했습니다.\n";
    std::cout << "\n";
    std::cout << "1. 여관 (체력 회복)\n";
    std::cout << "2. 상점 (아이템 구매)\n";
    std::cout << "3. 던전 (모험)\n";
    std::cout << "4. 종료\n";
    std::cout << "메뉴를 선택하세요: ";

    int choice;
    std::cin >> choice;

    switch (choice)
    {
        case 1: character.heal(); std::cout << "체력이 회복되었습니다.\n"; break;
        case 2: break; // 상점 로직 추가 가능
        case 3: break; // 던전 로직 추가 가능
        case 4: exit(0); break;
    }
}

int main()
{
    srand(static_cast<unsigned int>(time(0)));

    Character character;
    createCharacter(character);

    Mop mop("슬라임", 150, 5, 40, 10);
    fightmop(character, mop, 1);

    return 0;
}

